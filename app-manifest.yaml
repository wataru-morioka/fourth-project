apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: manual
provisioner:  kubernetes.io/no-provisioner

#region pv
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis-pv-volume
  labels:
    type: redis
spec:
  storageClassName: manual
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain 
  hostPath:
    path: "/Users/moriokawataru/Kubernetes/PersistentVolume/redis"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis-log-pv-volume
  labels:
    type: redis-log
spec:
  storageClassName: manual
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain 
  hostPath:
    path: "/Users/moriokawataru/Kubernetes/PersistentVolume/log/redis"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: oracle-pv-volume
  labels:
    type: oracle
spec:
  storageClassName: manual
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "/Users/moriokawataru/Kubernetes/PersistentVolume/oracle"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: rabbitmq-log-pv-volume
  labels:
    type: rabbitmq-log
spec:
  storageClassName: manual
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "/Users/moriokawataru/Kubernetes/PersistentVolume/log/rabbitmq"
# ---
# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: rabbitmq-replica-log-pv-volume
#   labels:
#     type: rabbitmq-replica-log
# spec:
#   storageClassName: manual
#   capacity:
#     storage: 100Mi
#   accessModes:
#     - ReadWriteOnce
#   persistentVolumeReclaimPolicy: Retain
#   hostPath:
#     path: "/Users/moriokawataru/Kubernetes/PersistentVolume/log/rabbitmq-replica"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: go-app-pv-volume
  labels:
    type: go-app
spec:
  storageClassName: manual
  capacity:
    storage: 500Mi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "/Users/moriokawataru/Docker/FourthProject/gRPC"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nginx-log-pv-volume
  labels:
    type: nginx-log
spec:
  storageClassName: manual
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "/Users/moriokawataru/Kubernetes/PersistentVolume/log/nginx"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: suricata-log-pv-volume
  labels:
    type: suricata-log
spec:
  storageClassName: manual
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "/Users/moriokawataru/Kubernetes/PersistentVolume/log/suricata"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: rabbitmq-data-pv-volume
  labels:
    type: rabbitmq-data
spec:
  storageClassName: manual
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "/Users/moriokawataru/Kubernetes/PersistentVolume/rabbitmq"
# ---
# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: rabbitmq-replica-data-pv-volume
#   labels:
#     type: rabbitmq-replica-data
# spec:
#   storageClassName: manual
#   capacity:
#     storage: 100Mi
#   accessModes:
#     - ReadWriteOnce
#   persistentVolumeReclaimPolicy: Retain
#   hostPath:
#     path: "/Users/moriokawataru/Kubernetes/PersistentVolume/rabbitmq-replica"

#endregion

#region pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rabbitmq-log-pv-claim
spec:
  selector:
    matchLabels:
      type: rabbitmq-log
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: rabbitmq-replica-log-pv-claim
# spec:
#   selector:
#     matchLabels:
#       type: rabbitmq-replica-log
#   storageClassName: manual
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 100Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nginx-log-pv-claim
spec:
  selector:
    matchLabels:
      type: nginx-log
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: suricata-log-pv-claim
spec:
  selector:
    matchLabels:
      type: suricata-log
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: go-app-pv-claim
spec:
  selector:
    matchLabels:
      type: go-app
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 500Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rabbitmq-data-pv-claim
spec:
  selector:
    matchLabels:
      type: rabbitmq-data
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: rabbitmq-replica-data-pv-claim
# spec:
#   selector:
#     matchLabels:
#       type: rabbitmq-replica-data
#   storageClassName: manual
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 100Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pv-claim
spec:
  selector:
    matchLabels:
      type: redis
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: redis-log-pv-claim
# spec:
#   selector:
#     matchLabels:
#       type: redis-log
#   storageClassName: manual
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 100Mi
# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: oracle-pv-claim
# spec:
#   selector:
#     matchLabels:
#       type: oracle
#   storageClassName: manual
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 7Gi

#endregion

#region service
---
apiVersion: v1
kind: Service
metadata:
  name: twemproxy-cluster
  labels:
    app: twemproxy
spec:
  type: ClusterIP
  selector:
    app: twemproxy
  ports:
  - name: "63791"
    port: 63791
    targetPort: 63791
  - name: "6222"
    port: 6222
    targetPort: 6222
---
apiVersion: v1
kind: Service
metadata:
  name: redis-0-service
  labels:
    app: redis-0
spec:
  # type: ClusterIP
  clusterIP: None
  ports:
  - port: 6379
    targetPort: 6379
    name: redis-0
  selector:
    statefulset.kubernetes.io/pod-name: redis-0
---
apiVersion: v1
kind: Service
metadata:
  name: redis-1-service
  labels:
    app: redis-1
spec:
  # type: ClusterIP
  clusterIP: None
  ports:
  - port: 6379
    targetPort: 6379
    name: redis-1
  selector:
    statefulset.kubernetes.io/pod-name: redis-1
---
apiVersion: v1
kind: Service
metadata:
  name: redis-nodeport
spec:
  type: NodePort
  ports:
    - name: nodeport
      port: 6379
      targetPort: 6379
      nodePort: 32600
  selector:
    # app: redis
    statefulset.kubernetes.io/pod-name: redis-0
---
apiVersion: v1
kind: Service
metadata:
  name: redis1-nodeport
spec:
  type: NodePort
  ports:
    - name: nodeport
      port: 6379
      targetPort: 6379
      nodePort: 32601
  selector:
    # app: redis
    statefulset.kubernetes.io/pod-name: redis-1
---
apiVersion: v1
kind: Service
metadata:
  name: go-authen-cluster
spec:
  type: ClusterIP
  ports:
    - name: cluster-port
      port: 50030
      targetPort: 50030
  selector:
    app: go-authen
---
apiVersion: v1
kind: Service
metadata:
  name: go-socket-cluster
spec:
  type: ClusterIP
  ports:
    - name: cluster-port
      port: 50050
      targetPort: 50050
  selector:
    app: go-socket
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-cluster
spec:
  type: ClusterIP
  ports:
    - name: cluster-port
      port: 5671
      targetPort: 5671
  selector:
    app: rabbitmq
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: rabbitmq-replica-cluster
# spec:
#   type: ClusterIP
#   ports:
#     - name: replica-port
#       port: 25672
#       targetPort: 25672
#   selector:
#     app: rabbitmq-replica
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: nginx-suricata-nodeport
# spec:
#   type: NodePort
#   ports:
#     - name: nodeport
#       port: 80
#       targetPort: 80
#       nodePort: 31800
#   selector:
#     app: nginx
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-authen-nodeport
spec:
  type: NodePort
  ports:
    - name: nodeport
      port: 50030
      targetPort: 50030
      nodePort: 31000
  selector:
    app: nginx
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-socket-nodeport
spec:
  type: NodePort
  ports:
    - name: nodeport
      port: 50050
      targetPort: 50050
      nodePort: 31100
  selector:
    app: nginx
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-rabbitmq-nodeport
spec:
  type: NodePort
  ports:
    - name: nodeport
      port: 5671
      targetPort: 5671
      nodePort: 31200
  selector:
    app: nginx
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-management-nodeport
spec:
  type: NodePort
  ports:
    - name: nodeport
      port: 15672
      targetPort: 15672
      nodePort: 31300
  selector:
    app: rabbitmq
---
apiVersion: v1
kind: Service
metadata:
  name: oracle-nodeport
spec:
  type: NodePort
  ports:
    - name: nodeport
      port: 1521
      targetPort: 1521
      nodePort: 31400
  selector:
    app: oracle

#endregion

#region nginx-suricata
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-suricata
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx-server
        image: watarumorioka/nginx-suricata-image
        imagePullPolicy: IfNotPresent
        env:
        - name: TRIPWIRE 
          valueFrom:
            secretKeyRef: 
              name: tripwire-secret
              key: password
        ports:
        - containerPort: 50030
        - containerPort: 50050
        # - containerPort: 80
        command: ["/bin/bash", "-c", "nginx && /etc/init.d/postfix restart && echo ${TRIPWIRE} | tripwire --init && suricata -c /etc/suricata/suricata.yaml -i eth0"]
        volumeMounts:
        - mountPath: /var/log/nginx
          name: nginx-persistent-storage 
        - mountPath: /var/log/suricata
          name: suricata-persistent-storage 
      volumes:
      - name: nginx-persistent-storage
        persistentVolumeClaim:
          claimName: nginx-log-pv-claim
      - name: suricata-persistent-storage
        persistentVolumeClaim:
          claimName: suricata-log-pv-claim
#endregion

#region go
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-authen
spec:
  replicas: 1
  selector:
    matchLabels:
      app: go-authen
  template:
    metadata:
      labels:
        app: go-authen
    spec:
      containers:
      - name: go-authen-server
        image: watarumorioka/go-image
        imagePullPolicy: IfNotPresent
        # command: ["/bin/bash", "-c", "cd /root && source .bashrc && go get github.com/mattn/go-oci8 && tail -f /dev/null"]
        command: ["/go/src/init.sh"]
        args: ["/go/src/gRPC/authen-server.go"]
        ports:
        - containerPort: 50030
        livenessProbe:
          exec:
            command: ["sh", "/go/src/authen-process-check.sh"]
          initialDelaySeconds: 60
          periodSeconds: 5
          failureThreshold: 1
        volumeMounts:
        # - mountPath: /go/src/gRPC/log
        #   name: go-log-persistent-storage 
        - mountPath: /go/src/gRPC
          name: go-app-persistent-storage 
      volumes:
      # - name: go-log-persistent-storage
      #   persistentVolumeClaim:
      #     claimName: go-log-pv-claim
      - name: go-app-persistent-storage
        persistentVolumeClaim:
          claimName: go-app-pv-claim
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-socket
spec:
  replicas: 1
  selector:
    matchLabels:
      app: go-socket
  template:
    metadata:
      labels:
        app: go-socket
    spec:
      containers:
      - name: go-socket-server
        image: watarumorioka/go-image
        imagePullPolicy: IfNotPresent
        command: ["/go/src/init.sh"]
        args: ["/go/src/gRPC/socket-server.go"]
        ports:
        - containerPort: 50050
        livenessProbe:
          exec:
            command: ["sh", "/go/src/socket-process-check.sh"]
          initialDelaySeconds: 60
          periodSeconds: 5
          failureThreshold: 1
        volumeMounts:
        - mountPath: /go/src/gRPC
          name: go-app-persistent-storage 
      volumes:
      - name: go-app-persistent-storage
        persistentVolumeClaim:
          claimName: go-app-pv-claim
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-consumer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: go-consumer
  template:
    metadata:
      labels:
        app: go-consumer
    spec:
      containers:
      - name: go-consumer-server
        image: watarumorioka/go-image
        imagePullPolicy: IfNotPresent
        env:
        - name: RABBITMQ_USER
          value: rabbitmq
          # valueFrom:
          #   secretKeyRef:
          #     name: go-secret
          #     key: rabbitmq_user
        - name: RABBITMQ_PASSWORD
          value: rabbitmq
          # valueFrom:
          #   secretKeyRef:
          #     name: go-secret
          #     key: rabbitmq_password
        command: ["/go/src/init.sh"]
        args: ["/go/src/gRPC/consumer-server.go"]
        # ports:
        # - containerPort: 50050
        livenessProbe:
          exec:
            command: ["sh", "/go/src/consumer-process-check.sh"]
          initialDelaySeconds: 60
          periodSeconds: 5
          failureThreshold: 1
        volumeMounts:
        - mountPath: /go/src/gRPC
          name: go-app-persistent-storage 
      volumes:
      - name: go-app-persistent-storage
        persistentVolumeClaim:
          claimName: go-app-pv-claim
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-notifier
spec:
  replicas: 1
  selector:
    matchLabels:
      app: go-notifier
  template:
    metadata:
      labels:
        app: go-notifier
    spec:
      containers:
      - name: go-notifier-server
        image: watarumorioka/go-image
        imagePullPolicy: IfNotPresent
        command: ["/go/src/init.sh"]
        args: ["/go/src/gRPC/notifier-server.go"]
        # command: ["/bin/bash", "-c"]
        # args: 
        # - sh /go/src/init.sh
        # - go run /go/src/gRPC/notifier-server.go
        # ports:
        # - containerPort: 50050
        livenessProbe:
          exec:
            command: ["sh", "/go/src/notifier-process-check.sh"]
          initialDelaySeconds: 60
          periodSeconds: 5
          failureThreshold: 1
        volumeMounts:
        - mountPath: /go/src/gRPC
          name: go-app-persistent-storage 
      volumes:
      - name: go-app-persistent-storage
        persistentVolumeClaim:
          claimName: go-app-pv-claim
#endregion

#region rabbitmq
---
apiVersion: apps/v1
kind: Deployment
# kind: StatefulSet
metadata:
  name: rabbitmq
spec:
  # serviceName: rabbitmq
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  # updateStrategy:
  #   type: RollingUpdate
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
      - name: rabbitmq-server
        image: watarumorioka/rabbitmq-image
        imagePullPolicy: IfNotPresent
        env:
        - name: ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: admin_user 
        - name: ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: admin_password
        - name: RABBITMQ_USER
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: rabbitmq_user
        - name: RABBITMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: rabbitmq_password
        - name: RABBITMQ_VHOST
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: rabbitmq_vhost
        command: [ "sh", "/init-rabbitmq.sh" ]
        ports:
        - containerPort: 5671
        - containerPort: 15672
        - containerPort: 25672
        volumeMounts:
        - mountPath: /var/log/rabbitmq
          name: rabbitmq-log-persistent-storage
        - mountPath: /var/lib/rabbitmq
          name: rabbitmq-data-persistent-storage
        - mountPath: /etc/ssl/private
          name: tls-secret
      volumes:
      - name: rabbitmq-log-persistent-storage
        persistentVolumeClaim:
          claimName: rabbitmq-log-pv-claim
      - name: rabbitmq-data-persistent-storage
        persistentVolumeClaim:
          claimName: rabbitmq-data-pv-claim
      - name: tls-secret
        secret:
          secretName: rabbitmq-tls-secret
  # volumeClaimTemplates:
  # - metadata:
  #     name: rabbitmq-data-pv-claim
  #   spec:
  #     selector:
  #       matchLabels:
  #         type: rabbitmq-data
  #     storageClassName: manual 
  #     accessModes: [ "ReadWriteOnce" ]
  #     resources:
  #       requests:
  #         storage: 100Mi
  # - metadata:
  #     name: rabbitmq-log-pv-claim
  #   spec:
  #     selector:
  #       matchLabels:
  #         type: rabbitmq-log
  #     storageClassName: manual 
  #     accessModes: [ "ReadWriteOnce" ]
  #     resources:
  #       requests:
  #         storage: 100Mi
# ---
# apiVersion: apps/v1
# kind: Deployment
# # kind: StatefulSet
# metadata:
#   name: rabbitmq-replica
# spec:
#   # serviceName: rabbitmq
#   replicas: 1
#   selector:
#     matchLabels:
#       app: rabbitmq-replica
#   # updateStrategy:
#   #   type: RollingUpdate
#   template:
#     metadata:
#       labels:
#         app: rabbitmq-replica
#     spec:
#       containers:
#       - name: rabbitmq-replica-server
#         image: watarumorioka/rabbitmq-replica-image
#         imagePullPolicy: IfNotPresent
#         env:
#         # - name: RABBITMQ_NODENAME
#         #   value: rabbit@rabbitmq-replica 
#         - name: ADMIN_USER
#           valueFrom:
#             secretKeyRef:
#               name: rabbitmq-secret
#               key: admin_user 
#         - name: ADMIN_PASSWORD
#           valueFrom:
#             secretKeyRef:
#               name: rabbitmq-secret
#               key: admin_password
#         - name: RABBITMQ_USER
#           valueFrom:
#             secretKeyRef:
#               name: rabbitmq-secret
#               key: rabbitmq_user
#         - name: RABBITMQ_PASSWORD
#           valueFrom:
#             secretKeyRef:
#               name: rabbitmq-secret
#               key: rabbitmq_password
#         - name: RABBITMQ_VHOST
#           valueFrom:
#             secretKeyRef:
#               name: rabbitmq-secret
#               key: rabbitmq_vhost
#         # command: [ "sh", "/init-rabbitmq.sh" ]
#         ports:
#         # - containerPort: 5671
#         - containerPort: 15672
#         - containerPort: 25672
#         volumeMounts:
#         - mountPath: /var/log/rabbitmq
#           name: rabbitmq-replica-log-persistent-storage
#         - mountPath: /var/lib/rabbitmq
#           name: rabbitmq-replica-data-persistent-storage
#         # - mountPath: /etc/ssl/private
#         #   name: tls-secret
#       volumes:
#       - name: rabbitmq-replica-log-persistent-storage
#         persistentVolumeClaim:
#           claimName: rabbitmq-replica-log-pv-claim
#       - name: rabbitmq-replica-data-persistent-storage
#         persistentVolumeClaim:
#           claimName: rabbitmq-replica-data-pv-claim
#       # - name: tls-secret
#       #   secret:
#       #     secretName: rabbitmq-tls-secret
#endregion

#region oracle
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: oracle
spec:
  serviceName: oracle
  replicas: 1
  selector:
    matchLabels:
      app: oracle
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: oracle
    spec:
      containers:
      - name: oracle-server
        image: oracle/database:18.3.0-ee
        imagePullPolicy: IfNotPresent
        env:
        - name: TZ
          valueFrom:
            secretKeyRef:
              name: oracle-secret
              key: tz
        - name: ORACLE_SID
          value: ORCL
          # valueFrom:
          #   secretKeyRef:
          #     name: oracle-secret
          #     key: sid 
        - name: ORACLE_PDB
          valueFrom:
            secretKeyRef:
              name: oracle-secret
              key: pdb
        - name: ORACLE_PWD
          valueFrom:
            secretKeyRef:
              name: oracle-secret
              key: pwd
        - name: ORACLE_CHARACTERSET
          valueFrom:
            secretKeyRef:
              name: oracle-secret
              key: char
        - name: NLS_LANG
          valueFrom:
            secretKeyRef:
              name: oracle-secret
              key: lang
        #command: [ "/sbin/rsyslogd", "-n" ]
        ports:
         - containerPort: 1521
         - containerPort: 5500
        # readinessProbe:
        #   tcpSocket:
        #     port: 1521
        #   initialDelaySeconds: 10
        #   periodSeconds: 5
        volumeMounts:
        - mountPath: /opt/oracle/oradata
          name: oracle-pv-claim 
  volumeClaimTemplates:
  - metadata:
      name: oracle-pv-claim
    spec:
      selector:
        matchLabels:
          type: oracle
      storageClassName: manual 
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
#endregion

#region twemproxy 
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: twemproxy-conf
data:
  twemproxy.yml: |
    pool:
      listen: 0.0.0.0:6222
      # hash: fnv1a_64
      hash: murmur
      # hash_tag: "{}"
      distribution: ketama
      auto_eject_hosts: true
      redis: true
      timeout: 40000
      server_retry_timeout: 30000
      server_failure_limit: 3
      server_connections: 1
      preconnect: true
      servers:
        - redis-0-service:6379:1
        - redis-1-service:6379:1
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: twemproxy
  labels:
    app: twemproxy
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: twemproxy
    spec:
      restartPolicy: Always
      containers:
      - name: twemproxy-server
        image: watarumorioka/twemproxy-image
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 63791
        - containerPort: 6222
        # command: ["/usr/bin/supervisord", "-c", "/etc/supervisor/supervisord.conf"]
        volumeMounts:
        - mountPath: /etc/conf
          name: twemproxy-conf 
      volumes:
      - name: twemproxy-conf 
        configMap: 
          name: twemproxy-conf 
          items:
            - key: twemproxy.yml
              path: twemproxy.yml 
#endregion
   
#region redis
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-conf
data:
  redis.conf: |
    # daemonize yes
    # pidfile redis_6379.pid
    port 6379
    bind 0.0.0.0
    # save ""
    # stop-writes-on-bgsave-error no  
    loglevel notice
    logfile /var/log/redis/redis.log
    dbfilename redis.rdb
    dir /var/lib/redis
    # requirepass redis
    maxclients 1024
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
spec:
  serviceName: redis
  replicas: 2
  selector:
    matchLabels:
      app: redis
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: redis
    spec:
      terminationGracePeriodSeconds: 3
      containers:
      - image: redis:5.0.5
        name: redis-server
        env:
        - name: REDIS_PASSWORD 
          valueFrom:
            secretKeyRef: 
              name: redis-secret
              key: password
        command: [ "redis-server" ]
        # args: [ "--requirepass $(REDIS_PASSWORD)" ]
        ports:
        - containerPort: 6379
          name: redis
        volumeMounts:
        # - name: redis-persistent-storage
        #   mountPath: /data
        # - name: redis-log-persistent-storage
        #   mountPath: /var/log/redis
        - name: redis-conf
          mountPath: /etc/redis
      volumes:
      # - name: redis-persistent-storage
      #   persistentVolumeClaim:
      #     claimName: redis-pv-claim
      # - name: redis-log-persistent-storage
      #   persistentVolumeClaim:
      #     claimName: redis-log-pv-claim
      - name: redis-conf 
        configMap: 
          name: redis-conf 
          items:
            - key: redis.conf 
              path: redis.conf 
  # volumeClaimTemplates:
  # - metadata:
  #     name: redis-log-pv-claim
  #   spec:
  #     selector:
  #       matchLabels:
  #         type: redis-log
  #     storageClassName: manual 
  #     accessModes: [ "ReadWriteOnce" ]
  #     resources:
  #       requests:
  #         storage: 100Mi
#endregion


