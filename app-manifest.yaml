apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: manual
provisioner:  kubernetes.io/no-provisioner
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis-pv-volume
  labels:
    type: redis
spec:
  storageClassName: manual
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain 
  hostPath:
    path: "/Users/moriokawataru/Kubernetes/PersistentVolume/redis"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis-log-pv-volume
  labels:
    type: redis-log
spec:
  storageClassName: manual
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain 
  hostPath:
    path: "/Users/moriokawataru/Kubernetes/PersistentVolume/log/redis"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: oracle-pv-volume
  labels:
    type: oracle
spec:
  storageClassName: manual
  capacity:
    storage: 7Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "/Users/moriokawataru/Docker/ThirdProject/oracle"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: rabbitmq-log-pv-volume
  labels:
    type: rabbitmq-log
spec:
  storageClassName: manual
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "/Users/moriokawataru/Kubernetes/PersistentVolume/log/rabbitmq"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: go-app-pv-volume
  labels:
    type: go-app
spec:
  storageClassName: manual
  capacity:
    storage: 500Mi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "/Users/moriokawataru/Docker/FourthProject/gRPC"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: rabbitmq-data-pv-volume
  labels:
    type: rabbitmq-data
spec:
  storageClassName: manual
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "/Users/moriokawataru/Kubernetes/PersistentVolume/rabbitmq"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rabbitmq-log-pv-claim
spec:
  selector:
    matchLabels:
      type: rabbitmq-log
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: go-app-pv-claim
spec:
  selector:
    matchLabels:
      type: go-app
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 500Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rabbitmq-data-pv-claim
spec:
  selector:
    matchLabels:
      type: rabbitmq-data
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pv-claim
spec:
  selector:
    matchLabels:
      type: redis
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-log-pv-claim
spec:
  selector:
    matchLabels:
      type: redis-log
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: oracle-pv-claim
spec:
  selector:
    matchLabels:
      type: oracle
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 7Gi
---
apiVersion: v1
kind: Service
metadata:
  name: redis-nodeport
spec:
  type: NodePort
  ports:
    - name: nodeport
      port: 6379
      targetPort: 6379
      nodePort: 32600
  selector:
    app: redis
---
apiVersion: v1
kind: Service
metadata:
  name: go-authen-nodeport
spec:
  type: NodePort
  ports:
    - name: nodeport
      port: 50030
      targetPort: 50030
      nodePort: 31000
  selector:
    app: go-authen
---
apiVersion: v1
kind: Service
metadata:
  name: go-socket-nodeport
spec:
  type: NodePort
  ports:
    - name: nodeport
      port: 50050
      targetPort: 50050
      nodePort: 31100
  selector:
    app: go-socket
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-nodeport
spec:
  type: NodePort
  ports:
    - name: nodeport
      port: 5671
      targetPort: 5671
      nodePort: 31200
  selector:
    app: rabbitmq
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-management-nodeport
spec:
  type: NodePort
  ports:
    - name: nodeport
      port: 15672
      targetPort: 15672
      nodePort: 31300
  selector:
    app: rabbitmq
---
apiVersion: v1
kind: Service
metadata:
  name: oracle-nodeport
spec:
  type: NodePort
  ports:
    - name: nodeport
      port: 1521
      targetPort: 1521
      nodePort: 31400
  selector:
    app: oracle
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-conf
data:
  redis.conf: |
    daemonize yes
    pidfile redis_6379.pid
    port 6379
    bind 127.0.0.1
    loglevel notice
    logfile /var/log/redis/redis.log
    dbfilename redis.rdb
    dir /var/run/redis
    requirepass redis
    maxclients 1024
    
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: nginx-deployment
# spec:
#   replicas: 2
#   selector:
#     matchLabels:
#       app: nginx
#       system: nginx-php
#   template:
#     metadata:
#       labels:
#         app: nginx
#         system: nginx-php
#     spec:
#       containers:
#       - name: nginx-server
#         image: watarumorioka/nginx-image
#         imagePullPolicy: IfNotPresent
#         ports:
#         - containerPort: 80
#         volumeMounts:
#         - mountPath: /etc/nginx/tls
#           name: tls-secret
#         - mountPath: /etc/nginx/conf.d # /etc/nginxにvolumesのnginx-confをmountする
#           name: nginx-conf
#         - mountPath: /var/www 
#           name: nginx-persistent-storage 
#       volumes:
#       - name: tls-secret
#         secret:
#           secretName: tls-secret
#       - name: nginx-conf # volumeMountsで/etc/nginxにmountするやつ
#         configMap: 
#           name: nginx-conf # ConfigMapのnginx-confを/etc/nginx以下に配置する
#           items:
#             - key: vhost.conf # nginx-confのkey
#               path: default.conf # nginx.confというファイル名
#       - name: nginx-persistent-storage
#         persistentVolumeClaim:
#           claimName: nginx-pv-claim
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-authen
spec:
  replicas: 1
  selector:
    matchLabels:
      app: go-authen
  template:
    metadata:
      labels:
        app: go-authen
    spec:
      containers:
      - name: go-authen-server
        image: watarumorioka/go-image
        imagePullPolicy: IfNotPresent
        # command: ["/bin/bash", "-c", "cd /root && source .bashrc && go get github.com/mattn/go-oci8 && tail -f /dev/null"]
        command: ["/go/src/init.sh"]
        args: ["/go/src/gRPC/authen-server.go"]
        ports:
        - containerPort: 50030
        livenessProbe:
          exec:
            command: ["sh", "/go/src/authen-process-check.sh"]
          initialDelaySeconds: 60
          periodSeconds: 5
          failureThreshold: 1
        volumeMounts:
        # - mountPath: /go/src/gRPC/log
        #   name: go-log-persistent-storage 
        - mountPath: /go/src/gRPC
          name: go-app-persistent-storage 
      volumes:
      # - name: go-log-persistent-storage
      #   persistentVolumeClaim:
      #     claimName: go-log-pv-claim
      - name: go-app-persistent-storage
        persistentVolumeClaim:
          claimName: go-app-pv-claim
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-socket
spec:
  replicas: 1
  selector:
    matchLabels:
      app: go-socket
  template:
    metadata:
      labels:
        app: go-socket
    spec:
      containers:
      - name: go-socket-server
        image: watarumorioka/go-image
        imagePullPolicy: IfNotPresent
        command: ["/go/src/init.sh"]
        args: ["/go/src/gRPC/socket-server.go"]
        ports:
        - containerPort: 50050
        livenessProbe:
          exec:
            command: ["sh", "/go/src/socket-process-check.sh"]
          initialDelaySeconds: 60
          periodSeconds: 5
          failureThreshold: 1
        volumeMounts:
        - mountPath: /go/src/gRPC
          name: go-app-persistent-storage 
      volumes:
      - name: go-app-persistent-storage
        persistentVolumeClaim:
          claimName: go-app-pv-claim
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-consumer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: go-consumer
  template:
    metadata:
      labels:
        app: go-consumer
    spec:
      containers:
      - name: go-consumer-server
        image: watarumorioka/go-image
        imagePullPolicy: IfNotPresent
        env:
        - name: RABBITMQ_USER
          value: rabbitmq
          # valueFrom:
          #   secretKeyRef:
          #     name: go-secret
          #     key: rabbitmq_user
        - name: RABBITMQ_PASSWORD
          value: rabbitmq
          # valueFrom:
          #   secretKeyRef:
          #     name: go-secret
          #     key: rabbitmq_password
        command: ["/go/src/init.sh"]
        args: ["/go/src/gRPC/consumer-server.go"]
        # ports:
        # - containerPort: 50050
        livenessProbe:
          exec:
            command: ["sh", "/go/src/consumer-process-check.sh"]
          initialDelaySeconds: 60
          periodSeconds: 5
          failureThreshold: 1
        volumeMounts:
        - mountPath: /go/src/gRPC
          name: go-app-persistent-storage 
      volumes:
      - name: go-app-persistent-storage
        persistentVolumeClaim:
          claimName: go-app-pv-claim
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-notifier
spec:
  replicas: 1
  selector:
    matchLabels:
      app: go-notifier
  template:
    metadata:
      labels:
        app: go-notifier
    spec:
      containers:
      - name: go-notifier-server
        image: watarumorioka/go-image
        imagePullPolicy: IfNotPresent
        command: ["//go/src/init.sh"]
        args: ["/go/src/gRPC/notifier-server.go"]
        # ports:
        # - containerPort: 50050
        livenessProbe:
          exec:
            command: ["sh", "/go/src/notifier-process-check.sh"]
          initialDelaySeconds: 60
          periodSeconds: 5
          failureThreshold: 1
        volumeMounts:
        - mountPath: /go/src/gRPC
          name: go-app-persistent-storage 
      volumes:
      - name: go-app-persistent-storage
        persistentVolumeClaim:
          claimName: go-app-pv-claim
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
      - name: rabbitmq-server
        image: watarumorioka/rabbitmq-image
        imagePullPolicy: IfNotPresent
        env:
        - name: ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: admin_user 
        - name: ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: admin_password
        - name: RABBITMQ_USER
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: rabbitmq_user
        - name: RABBITMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: rabbitmq_password
        - name: RABBITMQ_VHOST
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: rabbitmq_vhost
        command: [ "sh", "/init-rabbitmq.sh" ]
        ports:
        - containerPort: 5671
        - containerPort: 15672
        volumeMounts:
        - mountPath: /var/log/rabbitmq
          name: rabbitmq-log-persistent-storage 
        - mountPath: /var/lib/rabbitmq
          name: rabbitmq-data-persistent-storage 
        - mountPath: /etc/ssl/private
          name: tls-secret
      volumes:
      - name: rabbitmq-log-persistent-storage
        persistentVolumeClaim:
          claimName: rabbitmq-log-pv-claim
      - name: rabbitmq-data-persistent-storage
        persistentVolumeClaim:
          claimName: rabbitmq-data-pv-claim
      - name: tls-secret
        secret:
          secretName: rabbitmq-tls-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oracle
spec:
  replicas: 1
  selector:
    matchLabels:
      app: oracle
  template:
    metadata:
      labels:
        app: oracle
    spec:
      # type: ExternalName
      # externalName: oracle-server
      containers:
      - name: oracle-server
        image: oracle/database:18.3.0-ee
        imagePullPolicy: IfNotPresent
        env:
        - name: TZ
          valueFrom:
            secretKeyRef:
              name: oracle-secret
              key: tz
        - name: ORACLE_SID
          value: ORCL
          # valueFrom:
          #   secretKeyRef:
          #     name: oracle-secret
          #     key: sid 
        - name: ORACLE_PDB
          valueFrom:
            secretKeyRef:
              name: oracle-secret
              key: pdb
        - name: ORACLE_PWD
          valueFrom:
            secretKeyRef:
              name: oracle-secret
              key: pwd
        - name: ORACLE_CHARACTERSET
          valueFrom:
            secretKeyRef:
              name: oracle-secret
              key: char
        - name: NLS_LANG
          valueFrom:
            secretKeyRef:
              name: oracle-secret
              key: lang
        #command: [ "/sbin/rsyslogd", "-n" ]
        ports:
         - containerPort: 1521
         - containerPort: 5500
        volumeMounts:
        - mountPath: /opt/oracle/oradata
          name: oracle-persistent-storage 
      volumes:
      - name: oracle-persistent-storage
        persistentVolumeClaim:
          claimName: oracle-pv-claim
---
apiVersion: apps/v1beta1 # for versions before 1.8.0 use apps/v1beta1
kind: Deployment
metadata:
  name: redis
spec:
  selector:
    matchLabels:
      app: redis
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - image: redis:latest
        name: redis-server
        #command: [ "redis-server", "--appendonly", "yes" ]
        env:
        - name: REDIS_PASSWORD # Pod内に挿入する環境変数の名前
          valueFrom:
            secretKeyRef: 
              name: redis-secret
              key: password 
        command: [ "redis-server" ]
        args: [ "--requirepass $(REDIS_PASSWORD)" ]
        ports:
        - containerPort: 6379
          name: redis
        volumeMounts:
        - name: redis-persistent-storage
          mountPath: /data
        - name: redis-log-persistent-storage
          mountPath: /var/log/redis
        - name: redis-conf
          mountPath: /etc/redis
      volumes:
      - name: redis-persistent-storage
        persistentVolumeClaim:
          claimName: redis-pv-claim
      - name: redis-log-persistent-storage
        persistentVolumeClaim:
          claimName: redis-log-pv-claim
      - name: redis-conf 
        configMap: 
          name: redis-conf 
          items:
            - key: redis.conf 
              path: redis.conf 

